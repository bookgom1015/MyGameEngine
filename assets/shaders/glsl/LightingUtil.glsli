#ifndef _LIGHTINGUTIL_GLSLI_
#define _LIGHTINGUTIL_GLSLI_

#define MaxLights 16

struct Light {
	vec3 Strength;
	float FalloffStart;	// point/spot light only
	vec3 Direction;		// directional/spot light only
	float FalloffEnd;   // point/spot light only
	vec3 Position;		// point light only
	float SpotPower;    // spot light only
};

struct Material {
	vec4 DiffuseAlbedo;
	vec3 FresnelR0;
	float Shininess;
};

float CalcAttenuation(float d, float falloffStart, float falloffEnd) {
	// Linear falloff.
	return clamp((falloffEnd - d) / (falloffEnd - falloffStart), 0.0, 1.0);
}

// Schlick gives an approximation to Fresnel reflectance (see pg. 233 "Real-Time Rendering 3rd Ed.").
// R0 = ( (n-1)/(n+1) )^2, where n is the index of refraction.
vec3 SchlickFresnel(vec3 R0, vec3 normal, vec3 lightVec) {
	float cosIncidentAngle = clamp(dot(normal, lightVec), 0.0, 1.0);

	float f0 = 1.0 - cosIncidentAngle;
	vec3 reflectPercent = R0 + (1.0 - R0) * (f0 * f0 * f0 * f0 * f0);

	return reflectPercent;
}

vec3 BlinnPhong(vec3 lightStrength, vec3 lightVec, vec3 normal, vec3 toEye, Material mat) {
	const float m = mat.Shininess * 256.0;
	vec3 halfVec = normalize(toEye + lightVec);

	float roughnessFactor = (m + 8.0) * pow(max(dot(halfVec, normal), 0.0), m) / 8.0;
	vec3 fresnelFactor = SchlickFresnel(mat.FresnelR0, halfVec, lightVec);

	vec3 specAlbedo = fresnelFactor * roughnessFactor;

	// Our spec formula goes outside [0,1] range, but we are 
	// doing LDR rendering.  So scale it down a bit.
	specAlbedo = specAlbedo / (specAlbedo + 1.0);

	return (mat.DiffuseAlbedo.rgb + specAlbedo) * lightStrength;
}

//---------------------------------------------------------------------------------------
// Evaluates the lighting equation for directional lights.
//---------------------------------------------------------------------------------------
vec3 ComputeDirectionalLight(Light L, Material mat, vec3 normal, vec3 toEye) {
	// The light vector aims opposite the direction the light rays travel.
	vec3 lightVec = -L.Direction;

	// Scale light down by Lambert's cosine law.
	float ndotl = max(dot(lightVec, normal), 0.0);
	vec3 lightStrength = L.Strength * ndotl;

	return BlinnPhong(lightStrength, lightVec, normal, toEye, mat);
}

//---------------------------------------------------------------------------------------
// Evaluates the lighting equation for point lights.
//---------------------------------------------------------------------------------------
vec3 ComputePointLight(Light L, Material mat, vec3 pos, vec3 normal, vec3 toEye) {
	// The vector from the surface to the light.
	vec3 lightVec = L.Position - pos;

	// The distance from surface to light.
	float d = length(lightVec);

	// Range test.
	if (d > L.FalloffEnd)
		return vec3(0.0);

	// Normalize the light vector.
	lightVec /= d;

	// Scale light down by Lambert's cosine law.
	float ndotl = max(dot(lightVec, normal), 0.0);
	vec3 lightStrength = L.Strength * ndotl;

	// Attenuate light by distance.
	float att = CalcAttenuation(d, L.FalloffStart, L.FalloffEnd);
	lightStrength *= att;

	return BlinnPhong(lightStrength, lightVec, normal, toEye, mat);
}

//---------------------------------------------------------------------------------------
// Evaluates the lighting equation for spot lights.
//---------------------------------------------------------------------------------------
vec3 ComputeSpotLight(Light L, Material mat, vec3 pos, vec3 normal, vec3 toEye) {
	// The vector from the surface to the light.
	vec3 lightVec = L.Position - pos;

	// The distance from surface to light.
	float d = length(lightVec);

	// Range test.
	if (d > L.FalloffEnd)
		return vec3(0.0);

	// Normalize the light vector.
	lightVec /= d;

	// Scale light down by Lambert's cosine law.
	float ndotl = max(dot(lightVec, normal), 0.0);
	vec3 lightStrength = L.Strength * ndotl;

	// Attenuate light by distance.
	float att = CalcAttenuation(d, L.FalloffStart, L.FalloffEnd);
	lightStrength *= att;

	// Scale by spotlight
	float spotFactor = pow(max(dot(-lightVec, L.Direction), 0.0), L.SpotPower);
	lightStrength *= spotFactor;

	return BlinnPhong(lightStrength, lightVec, normal, toEye, mat);
}

vec4 ComputeLighting(Light gLights[MaxLights], Material mat, vec3 pos, vec3 normal, vec3 toEye,	vec3 shadowFactor) {
	vec3 result = vec3(0.0);

	int i = 0;

#if (NUM_DIR_LIGHTS > 0)
	for (i = 0; i < NUM_DIR_LIGHTS; ++i) {
		result += shadowFactor[i] * ComputeDirectionalLight(gLights[i], mat, normal, toEye);
	}
#endif

#if (NUM_POINT_LIGHTS > 0)
	for (i = NUM_DIR_LIGHTS; i < NUM_DIR_LIGHTS + NUM_POINT_LIGHTS; ++i) {
		result += ComputePointLight(gLights[i], mat, pos, normal, toEye);
	}
#endif

#if (NUM_SPOT_LIGHTS > 0)
	for (i = NUM_DIR_LIGHTS + NUM_POINT_LIGHTS; i < NUM_DIR_LIGHTS + NUM_POINT_LIGHTS + NUM_SPOT_LIGHTS; ++i) {
		result += ComputeSpotLight(gLights[i], mat, pos, normal, toEye);
	}
#endif 

	return vec4(result, 1.0);
}

#endif // _LIGHTINGUTIL_GLSLI_